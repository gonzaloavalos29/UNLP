@page "/listadoUsuarios"
@rendermode InteractiveServer

@inject ListarUsuariosUseCase ListarUsuarios
@inject UsuarioBajaUseCase UsuarioBaja
@inject NavigationManager Nav
@inject ServicioSesionUsuario Sesion
@inject IServicioAutorizacion Autorizacion

<h3>Listado de Usuarios</h3>

@if (!Sesion.EstaLogeado)
{
    <p>No estás logueado.</p>
    <NavLink href="/">Iniciar sesión</NavLink>
}
else
{

    <p>Bienvenido, @Sesion.UsuarioActual!.nombre</p>

    @if (usuarios.Count == 0)
    {
        <p>No hay usuarios registrados.</p>
    }

    <DialogoConfirmacion @ref="dialogo" OnConfirmado="EliminarConfirmado" />

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in usuarios)
            {
                <tr>
                    <td>@usuario.id</td>
                    <td>@usuario.nombre</td>
                    <td>@usuario.apellido</td>
                    <td>@usuario.email</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => EditarUsuario(usuario))"
                            disabled="@(!Autorizacion.PoseeElPermiso(Sesion.UsuarioActual.id, Permiso.UsuarioModificacion))">
                            Editar
                        </button>
                        <button class="btn btn-danger" @onclick="@(() => ConfirmarEliminacion(usuario))"
                            disabled="@(!Autorizacion.PoseeElPermiso(Sesion.UsuarioActual.id, Permiso.UsuarioBaja))">
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Usuario> usuarios = new();
    private Usuario? usuarioSeleccionado = null;
    private DialogoConfirmacion? dialogo = null!;

    protected override void OnInitialized()
    {
        RefrescarListado();
    }

    private void RefrescarListado()
    {
        usuarios = ListarUsuarios.Ejecutar();
    }

    private void EditarUsuario(Usuario usuario)
    {
        Nav.NavigateTo($"/editar-usuario/{usuario.id}");
    }

    private void ConfirmarEliminacion(Usuario usuario)
    {
        usuarioSeleccionado = usuario;
        dialogo?.Mostrar($"¿Desea eliminar al usuario {usuario.nombre} {usuario.apellido}?");
    }

    private void EliminarConfirmado()
    {
        if (usuarioSeleccionado == null)
            return;

        try
        {
            UsuarioBaja.Ejecutar(usuarioSeleccionado.id, Sesion.UsuarioActual!.id);
            RefrescarListado();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar usuario: {ex.Message}");
        }
    }
}
